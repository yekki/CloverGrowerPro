#! /bin/bash

# Usefull functions for CloverGrowerPro

sayColor() {
    local fmt="%s"
    case "$1" in
        error|red)
            fmt='\e[1;31m%s\e[0m';; # bold red
        skip|blue)
            fmt='\e[1;34m%s\e[0m';; # bold blue
        warn|yellow)
            fmt='\e[1;33m%s\e[0m';; # bold yellow
        pass|green)
            fmt='\e[1;32m%s\e[0m';; # bold green
        info|cyan)
            fmt='\e[1;36m%s\e[0m';; # cyan
    esac
    shift
    printf "$fmt\n" "$*"
}

say() {
    sayColor info "$*"
}

error() {
    sayColor error "Error: $*" >&2
}

die() {
    error "$*"
    exit 1
}

function echob() {
    echo $(tput bold)"$1"$(tput sgr0)
}

# Convert argument to lowercase
function lc() {
    echo "$@" | tr '[A-Z]' '[a-z]'
}

# Check if an element is valid
# Arguments:
#    $1: string to validate
#    $2+: array of valid elements
#
# Return the string if found else return an empty string
function valid() {
    local element
    local lcString=$(lc "$1")
    for element in $(lc ${@:2}); do
        [[ "$lcString" == $element* ]] && echo "$1" && return 0
    done
    return 1
}

function prompt() {
    local message="$1"
    local default=${@:2:1}
    local valid=${@:3}
    local goodAnswer=0
    until [[ "$goodAnswer" -eq 1 ]]; do
        read -p "${message}${default:+ [$default]}: " answer >&2
        [[ -z "$answer" && -n "$default" ]] && answer="$default"
        [[ -z "$valid" || (-n "$valid" && -n "$(valid ${answer} $valid)") ]] && goodAnswer=1
    done
    echo "$answer"
}

function storeConfig() {
    local variable="$1"
    local value="$2"
    [[ -z "$CLOVER_GROWER_PRO_CONF" ]] && \
     echob "variable CLOVER_GROWER_PRO_CONF not defined !" && exit 1
    egrep -v "^$variable=" "$CLOVER_GROWER_PRO_CONF" > "$CLOVER_GROWER_PRO_CONF".new
    echo "$variable='$value'" >> "$CLOVER_GROWER_PRO_CONF".new
    cat "$CLOVER_GROWER_PRO_CONF".new | sort > "$CLOVER_GROWER_PRO_CONF" && \
     rm "$CLOVER_GROWER_PRO_CONF".new
}

function exitTrap() {
    echo
    if [[ -n "${RAMDISK_MNT_PT:-}" ]]; then
        dev_ramdisk=$(mount | grep "$RAMDISK_MNT_PT" | awk '{print $1}')
        echo
        echo "Ejecting RAM disk";
        cd "$CLOVER_GROWER_PRO_DIR";
        umount "$RAMDISK_MNT_PT" && hdiutil detach "$dev_ramdisk"
    fi
}

function mountRamDisk() {
    export RAMDISK_MNT_PT="$1"
    dev_ramdisk=$(mount | grep "$RAMDISK_MNT_PT" | awk '{print $1}')
    if [ -z "$dev_ramdisk" ];then
        echo "Creating new RAM disk"
        dev_ramdisk=`hdiutil attach -nomount ram://524288 | awk '{print $1}'`
        echo
        [ -n "$dev_ramdisk" ] && newfs_hfs -v "CloverGrower RamDisk" "$dev_ramdisk" && echo
        [ ! -d "$RAMDISK_MNT_PT" ] && mkdir "$RAMDISK_MNT_PT"
        mount -t hfs "$dev_ramdisk" "$RAMDISK_MNT_PT"
    fi
}


function get_hours() {
	starth=$(date "+%k")
	# message Afternoon is longest len so others must have same len also
    # return a string with a length of 9
	if [[ $starth -ge 4	   && $starth -le 12 ]]; then
		hours="Morning"
	elif [[ $starth -ge 12 && $starth -le 17 ]]; then
		hours="Afternoon"
	elif [[ $starth -ge 18 && $starth -le 21 ]]; then
		hours="Evening"
	else
		hours="Night"
	fi
	printf "%-9s" $hours # 9 chars long
}

# Simple check return value function
function checkit(){
    return_val=$?
    local msg="$1"
    local error_msg="${2:-}"
    if [[ "${return_val}" -eq 0 ]]; then
        msg=$(sayColor info "$msg")
        printf "%s %s\n" "$msg" "$(sayColor pass OK)"
        return $return_val
    else
        sayColor error "$msg $error_msg ERROR!!"
        exit $return_val
    fi
}

# Print help option
printOptionHelp () {
    if [[ x$print_option_help_wc = x ]]; then
        if wc -L  </dev/null > /dev/null 2>&1; then
            print_option_help_wc=-L
        elif wc -m  </dev/null > /dev/null 2>&1; then
            print_option_help_wc=-m
        else
            print_option_help_wc=-b
        fi
    fi
    local print_option_help_lead="  $1"
    local print_option_help_lspace="$(echo "$print_option_help_lead" | wc $print_option_help_wc)"
    local print_option_help_fill="$((26 - print_option_help_lspace))"
    printf "%s" "$print_option_help_lead"
    local print_option_help_nl
    if [[ $print_option_help_fill -le 0 ]]; then
        print_option_help_nl=y
        echo
    else
        local print_option_help_i=0;
        while [[ $print_option_help_i -lt $print_option_help_fill ]]; do
            printf " "
            print_option_help_i=$((print_option_help_i+1))
        done
        print_option_help_nl=n
    fi
    local print_option_help_split="$(echo "$2" | fmt -w 60)"
    if [[ x$print_option_help_nl = xy ]]; then
        echo "$print_option_help_split" | awk '{ print "                          " $0; }'
    else
        echo "$print_option_help_split" | awk 'BEGIN { n = 0 }
              { if (n == 1) print "                          " $0; else print $0; n = 1 ; }'
    fi
}

# Function that return svn revision
function getSvnRevision() {
    # Arguments:
    #    $1: location of an svn repository (directory or URL)
    [[ $# -ne 1 ]] && echo "getSvnRevision: invalid number of arguments" >&2 && exit 1
    local svn_revision
    if [[ "$1" == *://* ]]; then
        svn_revision=$(LC_ALL=C svn info "$1" | sed -n 's/^Revision: *//p'; exit ${PIPESTATUS[0]})
        local return_code=$?
        [[ $return_code -ne 0 ]] && return $return_code
    else
        if [[ -d "$1/.git" ]]; then
            svn_revision=$(cd "$1" && LC_ALL=C git svn info 2>/dev/null | sed -n 's/^Revision: *//p')
        else
            svn_revision=$(LC_ALL=C svn info "$1" 2>/dev/null | sed -n 's/^Revision: *//p')
        fi
    fi
    echo $svn_revision
}

function checkout_git_svn_repository() {
    local svnremoteurl="$1"
    local lastrev=$(getSvnRevision "$svnremoteurl")
    echo "Getting history please wait ..."
    while read -r revision; do
        ((percent=(100 * $revision)/$lastrev))
        printf "\rGetting revision r%d / r%d (%d%%)" $revision $lastrev $percent
    done < <(git svn clone "$svnremoteurl" . 2>/dev/null | sed -nl 's/^r\([0-9]*\).*/\1/p')
    echo
}

# Function that checkout a svn repository into an svn or git-svn local repository
function checkout_repository() {
    local localdir="$1"
    local svnremoteurl="$2"
    local repotype=svn
    if [[ "$localdir" == */Clover ]]; then
        local msg=$(printf "Do you want %s or %s local clover repository" \
                    $(echob "svn") $(echob "git"))
        repotype=
        while [[ -z "$repotype" ]]; do
            repotype=$(prompt "$msg" "svn")
            case "$repotype" in
                [Ss]*) repotype='svn' ;;
                [Gg]*) repotype='git' ;;
                    *) repotype=      ;;
            esac
        done
    fi
    case "$repotype" in
        svn) echo "svn co $svnremoteurl"
             (cd "$localdir" && svn co "$svnremoteurl" "$localdir" && \
              svn revert -R "$localdir" &>/dev/null)
             ;;
        git)
             (cd "$localdir" && checkout_git_svn_repository "$svnremoteurl")
             ;;
        *) echo "Unknown repository type '$repotype" >&2
           exit 1
           ;;
    esac
}

function update_git_svn_repository() {
    local forcerevision="$1"
    # Check if we are on the master branch
    local branch=$(LC_ALL=C git rev-parse --abbrev-ref HEAD)
    if [[ "$branch" != master ]]; then
        echo
        echob "You're not on the 'master' branch. Can't update the repository !"
        echob "Press any key to continue…"
        tput bel
        read
        return
    fi
    # Check if we have pending commits
    local pending=$(git update-index --refresh && git diff-index --name-only HEAD)
    # Check if we have untracked files
    #local untracked=$(git ls-files :/ --exclude-standard --others)
    if [[ -z "$pending" ]];then
        local sha1=$(LC_ALL=C git svn find-rev r$forcerevision)
        if [[ -z "$sha1" ]]; then
            # Getting new history
            local lastrev=$(getSvnRevision "$svnremoteurl")
            if [[ "$forcerevision" -gt "$lastrev" ]]; then
                echo
                echob "Error revision $forcerevision doesn't exist. Last revision: $lastrev"
                echo
                exit 1
            fi
            echo "Getting history please wait ..."
            while read -r revision sha1; do
                ((percent=(100 * $revision)/$lastrev))
                log=$(LC_ALL=C git log -n1 --pretty=format:'[%an] %s' $sha1)
                printf "r%d / r%d (%d%%): %s\n" $revision $lastrev $percent "$log"
            done < <(git svn fetch 2>/dev/null | sed -nl 's/^r\([0-9]*\) *= *\([^ ]*\).*/\1 \2/p')
            sha1=$(LC_ALL=C git svn find-rev r$forcerevision)
        else
            printf "    %s %s ...\n" "$(sayColor red 'Resetting branch to revision')" "$(sayColor yellow $forcerevision)"
        fi
        LC_ALL=C git reset --hard "$sha1" >/dev/null
        return 0
    else
        # git svn fetch --all | grep '^r'
        echo
        echob "Local file(s) needs update:"
        echo  "$pending"
        echob "Not updating local repository ! Press any key to continue…"
        tput bel
        read
        return 0
    fi
    return 1
}

function update_svn_repository() {
    local remoteurl=
    local forcerevision=
    local svn_option=

    # Check the arguments.
    while [[ $# -gt 0 ]];do
        local option="$1"
        case "$option" in
            --force-revision=*) shift; forcerevision="${option#*=}" ;;
            --remote-url=*)     shift; remoteurl="${option#*=}" ;;
            -*) die "Unrecognized update_svn_repository option '$option'" ;;
            *)  die "update_svn_repository too many arguments" ;;
        esac
    done

    # Relocate URL if changed
    local svn_url=$(LC_ALL=C svn info . | sed -n 's/^URL: *//p')
    if [[ "$svn_url" != "$remoteurl" ]]; then
        say "    Switching to new URL: $remoteurl"
        svn switch --relocate "$svn_url" "$remoteurl"
    fi

    [[ -n "$forcerevision" ]] && svn_option="-r $forcerevision"
    local pending=$(svn status | sed -n 's/^[AM] *//p')
    if [[ -z "$pending" ]];then
        svn up $svn_option >/dev/null
        return 0
    else
        echo
        echob "Local file(s) needs update:"
        echo "$pending"
        echob "Not updating local repository ! Press any key to continue…"
        tput bel
        read
    fi
    return 1
}

# Function that update an svn or git-svn local repository
function update_repository() {

    local localdir=
    local remoteurl=
    local forcerevision=
    local repotype='svn'

    # Check the arguments.
    while [[ $# -gt 0 ]];do
        local option="$1"
        case "$option" in
            --force-revision=*) shift; forcerevision="${option#*=}" ;;
            --remote-url=*)     shift; remoteurl="${option#*=}" ;;
            -*) die "Unrecognized update_repository option '$option'" ;;
            *)  break ;;
        esac
    done

    [[ $# -lt 1 ]] && \
     die "update_repository invalid number of arguments: localdir is needed"

    [[ -z "$remoteurl" ]] && \
     die "update_repository invalid number of arguments: remoteurl is needed"

    localdir="$1"

    [[ -d "${localdir}/.git" ]] && repotype='git'
    case "$repotype" in
        svn)
             (cd "$localdir" && update_svn_repository \
              --force-revision="$forcerevision" --remote-url="$remoteurl")
             ;;
        git)
             (cd "$localdir" && update_git_svn_repository "$forcerevision")
             ;;
        *) echo "Unknown repository type '$repotype" >&2
           exit 1
           ;;
    esac
    return $?
}

# Automatically umount RAMDISK on exit
trap 'exitTrap' EXIT

# Local Variables:      #
# mode: ksh             #
# tab-width: 4          #
# indent-tabs-mode: nil #
# End:                  #
#
# vi: set expandtab ts=4 sw=4 sts=4: #
